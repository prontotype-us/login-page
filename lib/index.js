// Generated by CoffeeScript 1.10.0
var App, Dispatcher, ForgotForm, ForgotSuccess, IndexRoute, Link, LoginForm, LoginMixin, LoginPage, React, ResetForm, ResetSuccess, Route, Router, SetupForm, SignupForm, ValidatedFormMixin, browserHistory, confirm_password_field, email_field, fetch$, hashHistory, history, password_field, ref, setNext, token_field;

React = require('react');

ref = require('react-router'), Router = ref.Router, Route = ref.Route, IndexRoute = ref.IndexRoute, Link = ref.Link, hashHistory = ref.hashHistory, browserHistory = ref.browserHistory;

fetch$ = require('kefir-fetch');

ValidatedFormMixin = require('validated-form').ValidatedFormMixin;

history = browserHistory;

window.options = {};

email_field = {
  name: 'email',
  type: 'email',
  icon: 'envelope',
  error_message: 'Please enter a valid email'
};

password_field = {
  name: 'password',
  type: 'password',
  icon: 'key',
  error_message: 'Please enter a password'
};

confirm_password_field = {
  name: 'confirm_password',
  type: 'password',
  icon: 'key',
  error_message: 'Confirm your password'
};

token_field = {
  name: 'reset_token',
  type: 'hidden',
  error_message: 'No reset token'
};

Dispatcher = {
  doSubmit: function(url, data) {
    return fetch$('post', url, {
      body: data
    });
  }
};

LoginMixin = {
  showNext: function(resp) {
    var next, ref1;
    next = (resp != null ? resp.redirect : void 0) || this.props.location.query.next || '/';
    if ((ref1 = window.location.hash) != null ? ref1.length : void 0) {
      next += window.location.hash;
    }
    return window.location = next;
  },
  showSuccess: function() {
    return history.push({
      pathname: this.props.location.pathname + '/success',
      query: this.props.location.query
    });
  },
  handleError: function(resp) {
    return this.setState({
      errors: resp.errors
    });
  },
  onSubmit: function(values) {
    this.submitted$ = Dispatcher.doSubmit(this.props.url, values);
    this.submitted$.onValue(this.handleResponse);
    return this.submitted$.onError(this.handleError);
  }
};

LoginForm = React.createClass({displayName: "LoginForm",
  mixins: [ValidatedFormMixin, LoginMixin],
  getDefaultProps: function() {
    return {
      title: "Log in",
      url: '/login.json',
      fields: {
        email: email_field,
        password: password_field
      }
    };
  },
  getInitialState: function() {
    return {
      values: {
        email: '',
        password: ''
      },
      errors: {},
      loading: false
    };
  },
  handleResponse: function(resp) {
    if (resp.errors != null) {
      return this.handleError(resp);
    } else {
      return this.showNext(resp);
    }
  },
  render: function() {
    return React.createElement("div", null, React.createElement("h3", null, this.props.title), React.createElement("form", {
      "onSubmit": this.trySubmit
    }, this.renderFields(), React.createElement("button", {
      "type": 'submit',
      "disabled": this.state.loading
    }, (this.state.loading ? 'Logging in...' : 'Log in'))));
  }
});

SignupForm = React.createClass({displayName: "SignupForm",
  mixins: [ValidatedFormMixin, LoginMixin],
  getDefaultProps: function() {
    return {
      title: "Sign up",
      url: '/signup.json',
      fields: {
        email: email_field,
        password: password_field
      }
    };
  },
  getInitialState: function() {
    var initial_values;
    initial_values = {};
    Object.keys(this.props.fields).map((function(_this) {
      return function(f_k) {
        var ref1;
        return initial_values[f_k] = ((ref1 = _this.props.fields[f_k]) != null ? ref1.value : void 0) || '';
      };
    })(this));
    return {
      values: initial_values,
      errors: {},
      loading: false
    };
  },
  handleResponse: function(resp) {
    if (resp.errors != null) {
      return this.handleError(resp);
    } else {
      return this.showNext(resp);
    }
  },
  render: function() {
    return React.createElement("div", null, React.createElement("h3", null, this.props.title), React.createElement("form", {
      "onSubmit": this.trySubmit
    }, this.renderFields(), React.createElement("button", {
      "type": 'submit',
      "disabled": this.state.loading
    }, (this.state.loading ? 'Signing up...' : 'Sign up'))));
  }
});

SetupForm = React.createClass({displayName: "SetupForm",
  mixins: [ValidatedFormMixin, LoginMixin],
  getDefaultProps: function() {
    return {
      title: "Sign up",
      url: '/setup.json',
      fields: {
        email: email_field,
        password: password_field
      }
    };
  },
  getInitialState: function() {
    var initial_values;
    initial_values = {};
    Object.keys(this.props.fields).map((function(_this) {
      return function(f_k) {
        var ref1;
        return initial_values[f_k] = ((ref1 = _this.props.fields[f_k]) != null ? ref1.value : void 0) || '';
      };
    })(this));
    return {
      values: initial_values,
      errors: {},
      loading: false
    };
  },
  handleResponse: function(resp) {
    if (resp.errors != null) {
      return this.handleError(resp);
    } else {
      return this.showNext(resp);
    }
  },
  render: function() {
    return React.createElement("div", null, React.createElement("h3", null, this.props.title), React.createElement("form", {
      "onSubmit": this.trySubmit
    }, this.renderFields(), React.createElement("button", {
      "type": 'submit',
      "disabled": this.state.loading
    }, (this.state.loading ? 'Signing up...' : 'Sign up'))));
  }
});

ForgotForm = React.createClass({displayName: "ForgotForm",
  mixins: [ValidatedFormMixin, LoginMixin],
  getDefaultProps: function() {
    return {
      title: "Forgot your password?",
      url: '/forgot.json',
      fields: {
        email: email_field
      }
    };
  },
  getInitialState: function() {
    return {
      values: {
        email: ''
      },
      errors: {},
      loading: false
    };
  },
  handleResponse: function(resp) {
    if (resp.errors != null) {
      return this.handleError(resp);
    } else {
      return this.showSuccess();
    }
  },
  render: function() {
    return React.createElement("div", null, React.createElement("h3", null, this.props.title), React.createElement("form", {
      "onSubmit": this.trySubmit
    }, this.renderFields(), React.createElement("button", {
      "type": 'submit',
      "disabled": this.state.loading
    }, (this.state.loading ? 'Processing...' : 'Reset password'))));
  }
});

ForgotSuccess = React.createClass({displayName: "ForgotSuccess",
  render: function() {
    return React.createElement("div", {
      "className": 'center'
    }, (options.forgot_success_view ? options.forgot_success_view : React.createElement("div", null, React.createElement("h3", null, "Check your email!"), React.createElement("p", null, "We sent you an email with instructions to reset your password."))));
  }
});

ResetForm = React.createClass({displayName: "ResetForm",
  mixins: [ValidatedFormMixin, LoginMixin],
  getDefaultProps: function() {
    return {
      url: '/reset.json',
      fields: {
        password: password_field,
        confirm_password: confirm_password_field,
        reset_token: token_field
      }
    };
  },
  getInitialState: function() {
    return {
      values: {
        password: '',
        confirm_password: '',
        reset_token: this.props.params.reset_token || ''
      },
      errors: {},
      loading: false
    };
  },
  handleResponse: function(resp) {
    if (resp.errors != null) {
      return this.handleError(resp);
    } else {
      return this.showSuccess();
    }
  },
  render: function() {
    return React.createElement("div", null, React.createElement("h3", null, this.props.title), React.createElement("form", {
      "onSubmit": this.trySubmit
    }, this.renderField('password'), this.renderField('confirm_password'), this.renderField('reset_token'), React.createElement("button", {
      "type": 'submit',
      "disabled": this.state.loading
    }, (this.state.loading ? 'Processing...' : 'Set password'))));
  }
});

ResetSuccess = function(arg) {
  var location;
  location = arg.location;
  return React.createElement("div", {
    "className": 'center'
  }, (options.success_view ? options.success_view : React.createElement("div", null, React.createElement("h3", null, "Successfully set your password"), React.createElement("div", {
    "className": 'login-links'
  }, React.createElement(Link, {
    "to": {
      pathname: "/login",
      query: location.query
    }
  }, "Continue to login")))));
};

App = React.createClass({displayName: "App",
  getInitialState: function() {
    return {
      active: 'login'
    };
  },
  render: function() {
    var links, path, ref1, ref2, tabs;
    path = this.props.routes.slice(-1)[0].name;
    if (!path.length || path === 'unknown') {
      path = 'login';
    }
    tabs = React.createElement("div", {
      "className": 'login-tabs'
    }, (!options.hide_login ? React.createElement(Link, {
      "to": {
        pathname: "/login",
        query: this.props.location.query
      },
      "activeClassName": 'active',
      "className": (path === 'login' ? 'active' : '')
    }, "Log in") : void 0), (!options.hide_signup ? React.createElement(Link, {
      "to": {
        pathname: "/signup",
        query: this.props.location.query
      },
      "activeClassName": 'active'
    }, "Sign up") : void 0));
    links = {
      login: React.createElement("div", {
        "className": 'login-links'
      }, (!options.hide_forgot ? React.createElement(Link, {
        "to": {
          pathname: "/forgot",
          query: this.props.location.query
        }
      }, "Forgot Password?") : void 0), (!options.hide_signup ? React.createElement(Link, {
        "to": {
          pathname: "/signup",
          query: this.props.location.query
        }
      }, "Don\'t have an account?") : void 0)),
      signup: React.createElement("div", {
        "className": 'login-links'
      }, (!options.hide_login ? React.createElement(Link, {
        "to": {
          pathname: "/login",
          query: this.props.location.query
        }
      }, "Already have an account?") : void 0)),
      forgot: React.createElement("div", {
        "className": 'login-links'
      }, (!options.hide_login ? React.createElement(Link, {
        "to": {
          pathname: "/login",
          query: this.props.location.query
        }
      }, "« Nevermind") : void 0), (!options.hide_signup ? React.createElement(Link, {
        "to": {
          pathname: "/signup",
          query: this.props.location.query
        }
      }, "Don\'t have an account?") : void 0)),
      reset: null
    };
    return React.createElement("div", {
      "id": 'login-page',
      "className": "" + path
    }, options.header, (!options.hide_tabs ? tabs : void 0), React.createElement("div", {
      "id": 'login-inner'
    }, ((ref1 = options[path]) != null ? ref1.intro : void 0), React.cloneElement(this.props.children, options[path]), links[path], ((ref2 = options[path]) != null ? ref2.extras : void 0)), options.footer);
  }
});

window.options = {};

setNext = function(nextState, replace) {
  var next;
  next = nextState.location.pathname;
  return replace('/?next=' + next);
};

LoginPage = function(arg) {
  var options, routes;
  options = arg.options;
  Object.assign(window.options, options);
  routes = React.createElement(Route, {
    "path": "/",
    "component": App
  }, React.createElement(IndexRoute, {
    "name": "login",
    "component": LoginForm
  }), React.createElement(Route, {
    "path": "login",
    "name": "login",
    "component": LoginForm
  }), React.createElement(Route, {
    "path": "reset/:reset_token",
    "name": "reset",
    "component": ResetForm
  }), React.createElement(Route, {
    "path": "reset/:reset_token/success",
    "name": "reset-success",
    "component": ResetSuccess
  }), React.createElement(Route, {
    "path": "welcome/:reset_token",
    "name": "reset",
    "component": ResetForm
  }), React.createElement(Route, {
    "path": "welcome/:reset_token/success",
    "name": "reset-success",
    "component": ResetSuccess
  }), (!options.hide_signup ? React.createElement(Route, {
    "path": "signup",
    "name": "signup",
    "component": SignupForm
  }) : void 0), (!options.hide_forgot ? React.createElement(Route, {
    "path": "forgot",
    "name": "forgot",
    "component": ForgotForm
  }) : void 0), (!options.hide_forgot ? React.createElement(Route, {
    "path": "forgot/success",
    "name": "forgot-success",
    "component": ForgotSuccess
  }) : void 0), (!options.hide_setup ? React.createElement(Route, {
    "path": "setup",
    "name": "setup",
    "component": SetupForm
  }) : void 0), options.extra_routes, React.createElement(Route, {
    "path": "*",
    "name": "unknown",
    "component": LoginForm,
    "onEnter": setNext
  }));
  return React.createElement(Router, {
    "routes": routes,
    "history": history
  });
};

module.exports = {
  LoginPage: LoginPage,
  LoginForm: LoginForm,
  SignupForm: SignupForm,
  ForgotForm: ForgotForm,
  ResetForm: ResetForm
};
