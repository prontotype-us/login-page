// Generated by CoffeeScript 1.8.0
var App, Dispatcher, ForgotForm, ForgotSuccess, IndexRoute, Link, LoginForm, LoginMixin, LoginPage, React, ResetForm, ResetSuccess, Route, Router, SetupForm, SignupForm, ValidatedFormMixin, browserHistory, confirm_password_field, email_field, fetch$, hashHistory, history, password_field, setNext, token_field, _ref;

React = require('react');

_ref = require('react-router'), Router = _ref.Router, Route = _ref.Route, IndexRoute = _ref.IndexRoute, Link = _ref.Link, hashHistory = _ref.hashHistory, browserHistory = _ref.browserHistory;

fetch$ = require('kefir-fetch');

ValidatedFormMixin = require('pronto-validated-form').ValidatedFormMixin;

history = browserHistory;

window.options = {};

email_field = {
  name: 'email',
  type: 'email',
  icon: 'envelope',
  error_message: 'Please enter a valid email'
};

password_field = {
  name: 'password',
  type: 'password',
  icon: 'key',
  error_message: 'Please enter a password'
};

confirm_password_field = {
  name: 'confirm_password',
  type: 'password',
  icon: 'key',
  error_message: 'Confirm your password'
};

token_field = {
  name: 'reset_token',
  type: 'hidden',
  error_message: 'No reset token'
};

Dispatcher = {
  doSubmit: function(url, data) {
    return fetch$('post', url, {
      body: data
    });
  }
};

LoginMixin = {
  showNext: function(response) {
    var next, _ref1;
    next = (response != null ? response.redirect : void 0) || this.props.location.query.next || '/';
    if ((_ref1 = window.location.hash) != null ? _ref1.length : void 0) {
      next += window.location.hash;
    }
    return window.location = next;
  },
  showSuccess: function() {
    return history.push({
      pathname: this.props.location.pathname + '/success',
      query: this.props.location.query
    });
  },
  handleError: function(response) {
    return this.setState({
      errors: response.errors,
      loading: false
    });
  },
  onSubmit: function(values) {
    this.submitted$ = Dispatcher.doSubmit(this.props.url, values);
    this.submitted$.onValue(this.handleResponse);
    return this.submitted$.onError(this.handleError);
  }
};

LoginForm = React.createClass({
  mixins: [ValidatedFormMixin, LoginMixin],
  getDefaultProps: function() {
    return {
      title: "Log in",
      url: '/login.json',
      fields: {
        email: email_field,
        password: password_field
      },
      button: {
        text: 'Log in',
        submitting_text: 'Logging in...'
      }
    };
  },
  getInitialState: function() {
    var initial_values;
    initial_values = {};
    Object.keys(this.props.fields).map((function(_this) {
      return function(f_k) {
        var _ref1;
        return initial_values[f_k] = ((_ref1 = _this.props.fields[f_k]) != null ? _ref1.value : void 0) || '';
      };
    })(this));
    return {
      values: initial_values,
      errors: {},
      loading: false
    };
  },
  handleResponse: function(response) {
    if (response.errors != null) {
      return this.handleError(response);
    } else if (this.props.onSuccess != null) {
      return this.props.onSuccess(response);
    } else {
      return this.showNext(response);
    }
  },
  render: function() {
    return React.createElement("div", null, (this.props.title != null ? React.createElement("h3", null, this.props.title) : void 0), React.createElement("form", {
      "onSubmit": this.trySubmit
    }, this.renderFields(), React.createElement("button", {
      "type": 'submit',
      "disabled": this.state.loading
    }, (this.state.loading ? this.props.button.submitting_text : this.props.button.text))));
  }
});

SignupForm = React.createClass({
  mixins: [ValidatedFormMixin, LoginMixin],
  getDefaultProps: function() {
    return {
      title: "Sign up",
      url: '/signup.json',
      fields: {
        email: email_field,
        password: password_field
      },
      button: {
        text: 'Sign up',
        submitting_text: 'Signing up...'
      }
    };
  },
  getInitialState: function() {
    var initial_values;
    initial_values = {};
    Object.keys(this.props.fields).map((function(_this) {
      return function(f_k) {
        var _ref1;
        return initial_values[f_k] = ((_ref1 = _this.props.fields[f_k]) != null ? _ref1.value : void 0) || '';
      };
    })(this));
    return {
      values: initial_values,
      errors: {},
      loading: false
    };
  },
  handleResponse: function(response) {
    if (response.errors != null) {
      return this.handleError(response);
    } else if (this.props.onSuccess != null) {
      return this.props.onSuccess(response);
    } else {
      return this.showNext(response);
    }
  },
  render: function() {
    return React.createElement("div", null, (this.props.title != null ? React.createElement("h3", null, this.props.title) : void 0), React.createElement("form", {
      "onSubmit": this.trySubmit
    }, this.renderFields(), React.createElement("button", {
      "type": 'submit',
      "disabled": this.state.loading
    }, (this.state.loading ? this.props.button.submitting_text : this.props.button.text))));
  }
});

SetupForm = React.createClass({
  mixins: [ValidatedFormMixin, LoginMixin],
  getDefaultProps: function() {
    return {
      title: "Sign up",
      url: '/setup.json',
      fields: {
        email: email_field,
        password: password_field
      },
      button: {
        text: 'Sign up',
        submitting_text: 'Signing up...'
      }
    };
  },
  getInitialState: function() {
    var initial_values;
    initial_values = {};
    Object.keys(this.props.fields).map((function(_this) {
      return function(f_k) {
        var _ref1;
        return initial_values[f_k] = ((_ref1 = _this.props.fields[f_k]) != null ? _ref1.value : void 0) || '';
      };
    })(this));
    return {
      values: initial_values,
      errors: {},
      loading: false
    };
  },
  handleResponse: function(response) {
    var _ref1;
    if (response.errors != null) {
      if ((_ref1 = response.errors) != null ? _ref1.show_reset_password_link : void 0) {
        this.setState({
          show_reset_password_link: true
        });
      }
      return this.handleError(response);
    } else if (this.props.onSuccess != null) {
      return this.props.onSuccess(response);
    } else {
      return this.showNext(response);
    }
  },
  render: function() {
    return React.createElement("div", null, (this.props.title != null ? React.createElement("h3", null, this.props.title) : void 0), React.createElement("form", {
      "onSubmit": this.trySubmit
    }, (this.state.show_reset_password_link ? React.createElement("a", {
      "className": 'reset-password-link',
      "href": this.props.forgot_password_url
    }, "Reset password for existing account") : void 0), this.renderFields(), React.createElement("button", {
      "type": 'submit',
      "disabled": this.state.loading
    }, (this.state.loading ? this.props.button.submitting_text : this.props.button.text))));
  }
});

ForgotForm = React.createClass({
  mixins: [ValidatedFormMixin, LoginMixin],
  getDefaultProps: function() {
    return {
      title: "Forgot your password?",
      url: '/forgot.json',
      fields: {
        email: email_field
      },
      button: {
        text: 'Reset password',
        submitting_text: 'Processing...'
      }
    };
  },
  getInitialState: function() {
    return {
      values: {
        email: ''
      },
      errors: {},
      loading: false
    };
  },
  getInitialState: function() {
    var initial_values;
    initial_values = {};
    if (this.props.fields) {
      Object.keys(this.props.fields).map((function(_this) {
        return function(f_k) {
          var _ref1;
          return initial_values[f_k] = ((_ref1 = _this.props.fields[f_k]) != null ? _ref1.value : void 0) || '';
        };
      })(this));
      return {
        values: initial_values,
        errors: {},
        loading: false
      };
    } else {
      return {
        values: {
          email: ''
        },
        errors: {},
        loading: false
      };
    }
  },
  handleResponse: function(response) {
    if (response.errors != null) {
      return this.handleError(response);
    } else if (this.props.onSuccess != null) {
      return this.props.onSuccess(response);
    } else {
      return this.showSuccess();
    }
  },
  render: function() {
    return React.createElement("div", null, (this.props.title != null ? React.createElement("h3", null, this.props.title) : void 0), React.createElement("form", {
      "onSubmit": this.trySubmit
    }, this.renderFields(), React.createElement("button", {
      "type": 'submit',
      "disabled": this.state.loading
    }, (this.state.loading ? this.props.button.submitting_text : this.props.button.text))));
  }
});

ForgotSuccess = React.createClass({
  render: function() {
    return React.createElement("div", {
      "className": 'center'
    }, (options.forgot_success_view ? options.forgot_success_view : React.createElement("div", null, React.createElement("h3", null, "Check your email!"), React.createElement("p", null, "We sent you an email with instructions to reset your password."))));
  }
});

ResetForm = React.createClass({
  mixins: [ValidatedFormMixin, LoginMixin],
  getDefaultProps: function() {
    return {
      url: '/reset.json',
      fields: {
        password: password_field,
        confirm_password: confirm_password_field,
        reset_token: token_field
      },
      button: {
        text: 'Set password',
        submitting_text: 'Processing...'
      }
    };
  },
  getInitialState: function() {
    return {
      values: {
        password: '',
        confirm_password: '',
        reset_token: this.props.params.reset_token || ''
      },
      errors: {},
      loading: false
    };
  },
  handleResponse: function(response) {
    if (response.errors != null) {
      return this.handleError(response);
    } else if (this.props.onSuccess != null) {
      return this.props.onSuccess(response);
    } else {
      return this.showSuccess();
    }
  },
  render: function() {
    return React.createElement("div", null, (this.props.title != null ? React.createElement("h3", null, this.props.title) : void 0), React.createElement("form", {
      "onSubmit": this.trySubmit
    }, this.renderField('password'), this.renderField('confirm_password'), this.renderField('reset_token'), React.createElement("button", {
      "type": 'submit',
      "disabled": this.state.loading
    }, (this.state.loading ? this.props.button.submitting_text : this.props.button.text))));
  }
});

ResetSuccess = function(_arg) {
  var location, _ref1;
  location = _arg.location;
  return React.createElement("div", {
    "className": 'center'
  }, (options.success_view ? options.success_view : React.createElement("div", null, React.createElement("h3", null, "Successfully set your password"), (((_ref1 = window.setup_user) != null ? _ref1.id : void 0) == null ? React.createElement("div", {
    "className": 'login-links'
  }, React.createElement(Link, {
    "to": {
      pathname: "/login",
      query: location.query
    }
  }, "Continue to login")) : React.createElement("div", {
    "className": 'login-links'
  }, React.createElement(Link, {
    "to": {
      pathname: "/setup",
      query: location.query
    }
  }, "Continue to link your other account\u00a0using this password"))))));
};

App = React.createClass({
  getInitialState: function() {
    return {
      active: 'login'
    };
  },
  render: function() {
    var links, login_tab, login_tab_class, path, signup_tab, signup_tab_class, tabs, _ref1, _ref2, _ref3;
    path = this.props.routes.slice(-1)[0].name;
    if (!path.length || path === 'unknown') {
      path = 'login';
    }
    login_tab = !options.hide_login ? (login_tab_class = path === 'login' || (!options.signup_first && path === '/') ? 'active' : '', React.createElement(Link, {
      "to": {
        pathname: "/login",
        query: this.props.location.query
      },
      "activeClassName": 'active',
      "className": login_tab_class
    }, "Log in")) : void 0;
    signup_tab = !options.hide_signup ? (signup_tab_class = path === 'signup' || (options.signup_first && path === '/') ? 'active' : '', React.createElement(Link, {
      "to": {
        pathname: "/signup",
        query: this.props.location.query
      },
      "activeClassName": 'active',
      "className": signup_tab_class
    }, "Sign up")) : void 0;
    tabs = !options.signup_first ? React.createElement("div", {
      "className": 'login-tabs'
    }, login_tab, signup_tab) : React.createElement("div", {
      "className": 'login-tabs'
    }, signup_tab, login_tab);
    links = {
      login: React.createElement("div", {
        "className": 'login-links'
      }, (!options.hide_forgot ? React.createElement(Link, {
        "to": {
          pathname: "/forgot",
          query: this.props.location.query
        }
      }, "Forgot Password?") : void 0), (!options.hide_signup ? React.createElement(Link, {
        "to": {
          pathname: "/signup",
          query: this.props.location.query
        }
      }, "Don\'t have an account?") : void 0)),
      signup: React.createElement("div", {
        "className": 'login-links'
      }, (!options.hide_login ? React.createElement(Link, {
        "to": {
          pathname: "/login",
          query: this.props.location.query
        }
      }, "Already have an account?") : void 0)),
      forgot: React.createElement("div", {
        "className": 'login-links'
      }, (!options.hide_login ? React.createElement(Link, {
        "to": {
          pathname: "/login",
          query: this.props.location.query
        }
      }, "\u00ab Nevermind") : void 0), (!options.hide_signup ? React.createElement(Link, {
        "to": {
          pathname: "/signup",
          query: this.props.location.query
        }
      }, "Don\'t have an account?") : void 0)),
      reset: null
    };
    return React.createElement("div", {
      "id": 'login-page',
      "className": "" + path
    }, options.header, (!options.hide_tabs ? tabs : void 0), React.createElement("div", {
      "id": 'login-inner'
    }, ((_ref1 = options[path]) != null ? _ref1.intro : void 0), ((_ref2 = options[path]) != null ? _ref2.befores : void 0), React.cloneElement(this.props.children, options[path]), links[path], ((_ref3 = options[path]) != null ? _ref3.extras : void 0)), options.footer);
  }
});

window.options = {};

setNext = function(nextState, replace) {
  var next;
  next = nextState.location.pathname;
  return replace('/?next=' + next);
};

LoginPage = function(_arg) {
  var index_route, options, routes;
  options = _arg.options;
  Object.assign(window.options, options);
  index_route = !options.signup_first ? React.createElement(IndexRoute, {
    "name": "login",
    "component": LoginForm
  }) : React.createElement(IndexRoute, {
    "name": "signup",
    "component": SignupForm
  });
  routes = React.createElement(Route, {
    "path": "/",
    "component": App
  }, index_route, React.createElement(Route, {
    "path": "login",
    "name": "login",
    "component": LoginForm
  }), React.createElement(Route, {
    "path": "reset/:reset_token",
    "name": "reset",
    "component": ResetForm
  }), React.createElement(Route, {
    "path": "reset/:reset_token/success",
    "name": "reset-success",
    "component": ResetSuccess
  }), React.createElement(Route, {
    "path": "welcome/:reset_token",
    "name": "reset",
    "component": ResetForm
  }), React.createElement(Route, {
    "path": "welcome/:reset_token/success",
    "name": "reset-success",
    "component": ResetSuccess
  }), (!options.hide_signup ? React.createElement(Route, {
    "path": "signup",
    "name": "signup",
    "component": SignupForm
  }) : void 0), (!options.hide_forgot ? React.createElement(Route, {
    "path": "forgot",
    "name": "forgot",
    "component": ForgotForm
  }) : void 0), (!options.hide_forgot ? React.createElement(Route, {
    "path": "forgot/success",
    "name": "forgot-success",
    "component": ForgotSuccess
  }) : void 0), (!options.hide_setup ? React.createElement(Route, {
    "path": "setup",
    "name": "setup",
    "component": SetupForm
  }) : void 0), options.extra_routes, React.createElement(Route, {
    "path": "*",
    "name": "unknown",
    "component": LoginForm,
    "onEnter": setNext
  }));
  return React.createElement(Router, {
    "routes": routes,
    "history": history
  });
};

module.exports = {
  LoginPage: LoginPage,
  LoginForm: LoginForm,
  SignupForm: SignupForm,
  ForgotForm: ForgotForm,
  ResetForm: ResetForm
};
